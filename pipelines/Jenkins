pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'ranaessam'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials-id' // Jenkins credentials ID for Docker Hub
        GIT_REPO_URL = 'https://github.com/RanaEssam03/Library-Management-System' // Replace with your GitHub repo URL
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from GitHub
                sh 'git clone $GIT_REPO_URL'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                  
                    sh 'cd Library-Management-System && docker-compose --verbose build'
                }
            }
        }

        stage('Tag and Push Images') {
            steps {
                script {
                    sh'docker images'
                    // Log in to Docker Hub
                    docker.withRegistry("https://index.docker.io/v1/", DOCKER_CREDENTIALS_ID) {
                        // Tag and push backend image
                        sh 'docker tag library-management-system_backend:latest $DOCKER_REGISTRY/library-management-system_backend:latest'
                        sh 'docker push $DOCKER_REGISTRY/library-management-system_backend:latest'

                        // Tag and push frontend image
                        sh 'docker tag library-management-system_frontend:latest $DOCKER_REGISTRY/library-management-system_frontend:latest'
                        sh 'docker push $DOCKER_REGISTRY/library-management-system_frontend:latest'
                    }
                }
            }
        }

        //   stage('Switch Context') {
        //     steps {
        //         script {
        //           sh ' aws eks update-kubeconfig --region us-east-1 --name main-cluster'
        //         }
        //     }
        // }

       stage('Deployment') {
            steps {
                script {
                             // Define paths to your manifest files
                sh "cd Library-Management-System/deployment_configurations/ && kubectl create -f . "
           
               
                }
            }
        }

    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
    }
}